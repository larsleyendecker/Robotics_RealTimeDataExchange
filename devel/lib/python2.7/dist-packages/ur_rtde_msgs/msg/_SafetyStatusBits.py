# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur_rtde_msgs/SafetyStatusBits.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyStatusBits(genpy.Message):
  _md5sum = "04a8faad703e6d59a0c564a37f5a5a2a"
  _type = "ur_rtde_msgs/SafetyStatusBits"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message holds information about the safety status of the robot as explicit booleans

bool is_normal_mode
bool is_reduced_mode
bool is_protective_stopped
bool is_recovery_mode
bool is_safeguard_stopped
bool is_system_emergency_stopped
bool is_robot_emergency_stopped
bool is_emergency_stopped
bool is_violation
bool is_fault
bool is_stopped_due_to_safety
"""
  __slots__ = ['is_normal_mode','is_reduced_mode','is_protective_stopped','is_recovery_mode','is_safeguard_stopped','is_system_emergency_stopped','is_robot_emergency_stopped','is_emergency_stopped','is_violation','is_fault','is_stopped_due_to_safety']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_normal_mode,is_reduced_mode,is_protective_stopped,is_recovery_mode,is_safeguard_stopped,is_system_emergency_stopped,is_robot_emergency_stopped,is_emergency_stopped,is_violation,is_fault,is_stopped_due_to_safety

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyStatusBits, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_normal_mode is None:
        self.is_normal_mode = False
      if self.is_reduced_mode is None:
        self.is_reduced_mode = False
      if self.is_protective_stopped is None:
        self.is_protective_stopped = False
      if self.is_recovery_mode is None:
        self.is_recovery_mode = False
      if self.is_safeguard_stopped is None:
        self.is_safeguard_stopped = False
      if self.is_system_emergency_stopped is None:
        self.is_system_emergency_stopped = False
      if self.is_robot_emergency_stopped is None:
        self.is_robot_emergency_stopped = False
      if self.is_emergency_stopped is None:
        self.is_emergency_stopped = False
      if self.is_violation is None:
        self.is_violation = False
      if self.is_fault is None:
        self.is_fault = False
      if self.is_stopped_due_to_safety is None:
        self.is_stopped_due_to_safety = False
    else:
      self.is_normal_mode = False
      self.is_reduced_mode = False
      self.is_protective_stopped = False
      self.is_recovery_mode = False
      self.is_safeguard_stopped = False
      self.is_system_emergency_stopped = False
      self.is_robot_emergency_stopped = False
      self.is_emergency_stopped = False
      self.is_violation = False
      self.is_fault = False
      self.is_stopped_due_to_safety = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.is_normal_mode, _x.is_reduced_mode, _x.is_protective_stopped, _x.is_recovery_mode, _x.is_safeguard_stopped, _x.is_system_emergency_stopped, _x.is_robot_emergency_stopped, _x.is_emergency_stopped, _x.is_violation, _x.is_fault, _x.is_stopped_due_to_safety))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.is_normal_mode, _x.is_reduced_mode, _x.is_protective_stopped, _x.is_recovery_mode, _x.is_safeguard_stopped, _x.is_system_emergency_stopped, _x.is_robot_emergency_stopped, _x.is_emergency_stopped, _x.is_violation, _x.is_fault, _x.is_stopped_due_to_safety,) = _get_struct_11B().unpack(str[start:end])
      self.is_normal_mode = bool(self.is_normal_mode)
      self.is_reduced_mode = bool(self.is_reduced_mode)
      self.is_protective_stopped = bool(self.is_protective_stopped)
      self.is_recovery_mode = bool(self.is_recovery_mode)
      self.is_safeguard_stopped = bool(self.is_safeguard_stopped)
      self.is_system_emergency_stopped = bool(self.is_system_emergency_stopped)
      self.is_robot_emergency_stopped = bool(self.is_robot_emergency_stopped)
      self.is_emergency_stopped = bool(self.is_emergency_stopped)
      self.is_violation = bool(self.is_violation)
      self.is_fault = bool(self.is_fault)
      self.is_stopped_due_to_safety = bool(self.is_stopped_due_to_safety)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11B().pack(_x.is_normal_mode, _x.is_reduced_mode, _x.is_protective_stopped, _x.is_recovery_mode, _x.is_safeguard_stopped, _x.is_system_emergency_stopped, _x.is_robot_emergency_stopped, _x.is_emergency_stopped, _x.is_violation, _x.is_fault, _x.is_stopped_due_to_safety))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.is_normal_mode, _x.is_reduced_mode, _x.is_protective_stopped, _x.is_recovery_mode, _x.is_safeguard_stopped, _x.is_system_emergency_stopped, _x.is_robot_emergency_stopped, _x.is_emergency_stopped, _x.is_violation, _x.is_fault, _x.is_stopped_due_to_safety,) = _get_struct_11B().unpack(str[start:end])
      self.is_normal_mode = bool(self.is_normal_mode)
      self.is_reduced_mode = bool(self.is_reduced_mode)
      self.is_protective_stopped = bool(self.is_protective_stopped)
      self.is_recovery_mode = bool(self.is_recovery_mode)
      self.is_safeguard_stopped = bool(self.is_safeguard_stopped)
      self.is_system_emergency_stopped = bool(self.is_system_emergency_stopped)
      self.is_robot_emergency_stopped = bool(self.is_robot_emergency_stopped)
      self.is_emergency_stopped = bool(self.is_emergency_stopped)
      self.is_violation = bool(self.is_violation)
      self.is_fault = bool(self.is_fault)
      self.is_stopped_due_to_safety = bool(self.is_stopped_due_to_safety)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11B = None
def _get_struct_11B():
    global _struct_11B
    if _struct_11B is None:
        _struct_11B = struct.Struct("<11B")
    return _struct_11B
