# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur_rtde_msgs/ToolMode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ToolMode(genpy.Message):
  _md5sum = "1736958a92911ce08199a848452129f3"
  _type = "ur_rtde_msgs/ToolMode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#This message holds data describing the mode of a tool

uint8 JOINT_MODE_RESET=235
uint8 JOINT_MODE_SHUTTING_DOWN=236
uint8 JOINT_MODE_POWER_OFF=239
uint8 JOINT_MODE_NOT_RESPONDING=245
uint8 JOINT_MODE_BOOTING=247
uint8 JOINT_MODE_BOOTLOADER=249
uint8 JOINT_MODE_FAULT=252
uint8 JOINT_MODE_RUNNING=253
uint8 JOINT_MODE_IDLE=255

uint8 mode
"""
  # Pseudo-constants
  JOINT_MODE_RESET = 235
  JOINT_MODE_SHUTTING_DOWN = 236
  JOINT_MODE_POWER_OFF = 239
  JOINT_MODE_NOT_RESPONDING = 245
  JOINT_MODE_BOOTING = 247
  JOINT_MODE_BOOTLOADER = 249
  JOINT_MODE_FAULT = 252
  JOINT_MODE_RUNNING = 253
  JOINT_MODE_IDLE = 255

  __slots__ = ['mode']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToolMode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
    else:
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.mode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.mode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
