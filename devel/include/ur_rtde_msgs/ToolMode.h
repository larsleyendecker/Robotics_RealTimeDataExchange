// Generated by gencpp from file ur_rtde_msgs/ToolMode.msg
// DO NOT EDIT!


#ifndef UR_RTDE_MSGS_MESSAGE_TOOLMODE_H
#define UR_RTDE_MSGS_MESSAGE_TOOLMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_rtde_msgs
{
template <class ContainerAllocator>
struct ToolMode_
{
  typedef ToolMode_<ContainerAllocator> Type;

  ToolMode_()
    : mode(0)  {
    }
  ToolMode_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(JOINT_MODE_RESET)
  #undef JOINT_MODE_RESET
#endif
#if defined(_WIN32) && defined(JOINT_MODE_SHUTTING_DOWN)
  #undef JOINT_MODE_SHUTTING_DOWN
#endif
#if defined(_WIN32) && defined(JOINT_MODE_POWER_OFF)
  #undef JOINT_MODE_POWER_OFF
#endif
#if defined(_WIN32) && defined(JOINT_MODE_NOT_RESPONDING)
  #undef JOINT_MODE_NOT_RESPONDING
#endif
#if defined(_WIN32) && defined(JOINT_MODE_BOOTING)
  #undef JOINT_MODE_BOOTING
#endif
#if defined(_WIN32) && defined(JOINT_MODE_BOOTLOADER)
  #undef JOINT_MODE_BOOTLOADER
#endif
#if defined(_WIN32) && defined(JOINT_MODE_FAULT)
  #undef JOINT_MODE_FAULT
#endif
#if defined(_WIN32) && defined(JOINT_MODE_RUNNING)
  #undef JOINT_MODE_RUNNING
#endif
#if defined(_WIN32) && defined(JOINT_MODE_IDLE)
  #undef JOINT_MODE_IDLE
#endif

  enum {
    JOINT_MODE_RESET = 235u,
    JOINT_MODE_SHUTTING_DOWN = 236u,
    JOINT_MODE_POWER_OFF = 239u,
    JOINT_MODE_NOT_RESPONDING = 245u,
    JOINT_MODE_BOOTING = 247u,
    JOINT_MODE_BOOTLOADER = 249u,
    JOINT_MODE_FAULT = 252u,
    JOINT_MODE_RUNNING = 253u,
    JOINT_MODE_IDLE = 255u,
  };


  typedef boost::shared_ptr< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> const> ConstPtr;

}; // struct ToolMode_

typedef ::ur_rtde_msgs::ToolMode_<std::allocator<void> > ToolMode;

typedef boost::shared_ptr< ::ur_rtde_msgs::ToolMode > ToolModePtr;
typedef boost::shared_ptr< ::ur_rtde_msgs::ToolMode const> ToolModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_rtde_msgs::ToolMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_rtde_msgs::ToolMode_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::ToolMode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_rtde_msgs::ToolMode_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::ToolMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_rtde_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1736958a92911ce08199a848452129f3";
  }

  static const char* value(const ::ur_rtde_msgs::ToolMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1736958a92911ce0ULL;
  static const uint64_t static_value2 = 0x8199a848452129f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_rtde_msgs/ToolMode";
  }

  static const char* value(const ::ur_rtde_msgs::ToolMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message holds data describing the mode of a tool\n"
"\n"
"uint8 JOINT_MODE_RESET=235\n"
"uint8 JOINT_MODE_SHUTTING_DOWN=236\n"
"uint8 JOINT_MODE_POWER_OFF=239\n"
"uint8 JOINT_MODE_NOT_RESPONDING=245\n"
"uint8 JOINT_MODE_BOOTING=247\n"
"uint8 JOINT_MODE_BOOTLOADER=249\n"
"uint8 JOINT_MODE_FAULT=252\n"
"uint8 JOINT_MODE_RUNNING=253\n"
"uint8 JOINT_MODE_IDLE=255\n"
"\n"
"uint8 mode\n"
;
  }

  static const char* value(const ::ur_rtde_msgs::ToolMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToolMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_rtde_msgs::ToolMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_rtde_msgs::ToolMode_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_RTDE_MSGS_MESSAGE_TOOLMODE_H
