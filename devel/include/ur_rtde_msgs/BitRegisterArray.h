// Generated by gencpp from file ur_rtde_msgs/BitRegisterArray.msg
// DO NOT EDIT!


#ifndef UR_RTDE_MSGS_MESSAGE_BITREGISTERARRAY_H
#define UR_RTDE_MSGS_MESSAGE_BITREGISTERARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ur_msgs/Digital.h>

namespace ur_rtde_msgs
{
template <class ContainerAllocator>
struct BitRegisterArray_
{
  typedef BitRegisterArray_<ContainerAllocator> Type;

  BitRegisterArray_()
    : registers()  {
    }
  BitRegisterArray_(const ContainerAllocator& _alloc)
    : registers(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ur_msgs::Digital_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ur_msgs::Digital_<ContainerAllocator> >::other >  _registers_type;
  _registers_type registers;





  typedef boost::shared_ptr< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> const> ConstPtr;

}; // struct BitRegisterArray_

typedef ::ur_rtde_msgs::BitRegisterArray_<std::allocator<void> > BitRegisterArray;

typedef boost::shared_ptr< ::ur_rtde_msgs::BitRegisterArray > BitRegisterArrayPtr;
typedef boost::shared_ptr< ::ur_rtde_msgs::BitRegisterArray const> BitRegisterArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator2> & rhs)
{
  return lhs.registers == rhs.registers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_rtde_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa301592de7e88e6f3fde2a8438da042";
  }

  static const char* value(const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa301592de7e88e6ULL;
  static const uint64_t static_value2 = 0xf3fde2a8438da042ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_rtde_msgs/BitRegisterArray";
  }

  static const char* value(const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message holds an array of values for bit registers.\n"
"\n"
"ur_msgs/Digital[] registers\n"
"\n"
"================================================================================\n"
"MSG: ur_msgs/Digital\n"
"uint8 pin\n"
"bool state\n"
;
  }

  static const char* value(const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.registers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BitRegisterArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_rtde_msgs::BitRegisterArray_<ContainerAllocator>& v)
  {
    s << indent << "registers[]" << std::endl;
    for (size_t i = 0; i < v.registers.size(); ++i)
    {
      s << indent << "  registers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ur_msgs::Digital_<ContainerAllocator> >::stream(s, indent + "    ", v.registers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_RTDE_MSGS_MESSAGE_BITREGISTERARRAY_H
