// Generated by gencpp from file ur_rtde_msgs/RobotStatusBits.msg
// DO NOT EDIT!


#ifndef UR_RTDE_MSGS_MESSAGE_ROBOTSTATUSBITS_H
#define UR_RTDE_MSGS_MESSAGE_ROBOTSTATUSBITS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_rtde_msgs
{
template <class ContainerAllocator>
struct RobotStatusBits_
{
  typedef RobotStatusBits_<ContainerAllocator> Type;

  RobotStatusBits_()
    : is_power_on(false)
    , is_program_running(false)
    , is_teach_button_pressed(false)
    , is_power_button_pressed(false)  {
    }
  RobotStatusBits_(const ContainerAllocator& _alloc)
    : is_power_on(false)
    , is_program_running(false)
    , is_teach_button_pressed(false)
    , is_power_button_pressed(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_power_on_type;
  _is_power_on_type is_power_on;

   typedef uint8_t _is_program_running_type;
  _is_program_running_type is_program_running;

   typedef uint8_t _is_teach_button_pressed_type;
  _is_teach_button_pressed_type is_teach_button_pressed;

   typedef uint8_t _is_power_button_pressed_type;
  _is_power_button_pressed_type is_power_button_pressed;





  typedef boost::shared_ptr< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatusBits_

typedef ::ur_rtde_msgs::RobotStatusBits_<std::allocator<void> > RobotStatusBits;

typedef boost::shared_ptr< ::ur_rtde_msgs::RobotStatusBits > RobotStatusBitsPtr;
typedef boost::shared_ptr< ::ur_rtde_msgs::RobotStatusBits const> RobotStatusBitsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator2> & rhs)
{
  return lhs.is_power_on == rhs.is_power_on &&
    lhs.is_program_running == rhs.is_program_running &&
    lhs.is_teach_button_pressed == rhs.is_teach_button_pressed &&
    lhs.is_power_button_pressed == rhs.is_power_button_pressed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_rtde_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d870e5a3ed575abc3e1c22a80e661672";
  }

  static const char* value(const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd870e5a3ed575abcULL;
  static const uint64_t static_value2 = 0x3e1c22a80e661672ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_rtde_msgs/RobotStatusBits";
  }

  static const char* value(const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message holds information about the robot status as explicit booleans\n"
"\n"
"bool is_power_on\n"
"bool is_program_running\n"
"bool is_teach_button_pressed\n"
"bool is_power_button_pressed\n"
;
  }

  static const char* value(const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_power_on);
      stream.next(m.is_program_running);
      stream.next(m.is_teach_button_pressed);
      stream.next(m.is_power_button_pressed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatusBits_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_rtde_msgs::RobotStatusBits_<ContainerAllocator>& v)
  {
    s << indent << "is_power_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_power_on);
    s << indent << "is_program_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_program_running);
    s << indent << "is_teach_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_teach_button_pressed);
    s << indent << "is_power_button_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_power_button_pressed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_RTDE_MSGS_MESSAGE_ROBOTSTATUSBITS_H
