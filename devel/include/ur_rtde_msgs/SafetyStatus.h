// Generated by gencpp from file ur_rtde_msgs/SafetyStatus.msg
// DO NOT EDIT!


#ifndef UR_RTDE_MSGS_MESSAGE_SAFETYSTATUS_H
#define UR_RTDE_MSGS_MESSAGE_SAFETYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur_rtde_msgs
{
template <class ContainerAllocator>
struct SafetyStatus_
{
  typedef SafetyStatus_<ContainerAllocator> Type;

  SafetyStatus_()
    : status(0)  {
    }
  SafetyStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SAFETY_STATUS_SYSTEM_THREE_POSITION_ENABLING_STOP)
  #undef SAFETY_STATUS_SYSTEM_THREE_POSITION_ENABLING_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_AUTOMATIC_MODE_SAFEGUARD_STOP)
  #undef SAFETY_STATUS_AUTOMATIC_MODE_SAFEGUARD_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_UNDEFINED_SAFETY_MODE)
  #undef SAFETY_STATUS_UNDEFINED_SAFETY_MODE
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_VALIDATE_JOINT_ID)
  #undef SAFETY_STATUS_VALIDATE_JOINT_ID
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_FAULT)
  #undef SAFETY_STATUS_FAULT
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_VIOLATION)
  #undef SAFETY_STATUS_VIOLATION
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_ROBOT_EMERGENCY_STOP)
  #undef SAFETY_STATUS_ROBOT_EMERGENCY_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_SYSTEM_EMERGENCY_STOP)
  #undef SAFETY_STATUS_SYSTEM_EMERGENCY_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_SAFEGUARD_STOP)
  #undef SAFETY_STATUS_SAFEGUARD_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_RECOVERY)
  #undef SAFETY_STATUS_RECOVERY
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_PROTECTIVE_STOP)
  #undef SAFETY_STATUS_PROTECTIVE_STOP
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_REDUCED)
  #undef SAFETY_STATUS_REDUCED
#endif
#if defined(_WIN32) && defined(SAFETY_STATUS_NORMAL)
  #undef SAFETY_STATUS_NORMAL
#endif

  enum {
    SAFETY_STATUS_SYSTEM_THREE_POSITION_ENABLING_STOP = 13u,
    SAFETY_STATUS_AUTOMATIC_MODE_SAFEGUARD_STOP = 12u,
    SAFETY_STATUS_UNDEFINED_SAFETY_MODE = 11u,
    SAFETY_STATUS_VALIDATE_JOINT_ID = 10u,
    SAFETY_STATUS_FAULT = 9u,
    SAFETY_STATUS_VIOLATION = 8u,
    SAFETY_STATUS_ROBOT_EMERGENCY_STOP = 7u,
    SAFETY_STATUS_SYSTEM_EMERGENCY_STOP = 6u,
    SAFETY_STATUS_SAFEGUARD_STOP = 5u,
    SAFETY_STATUS_RECOVERY = 4u,
    SAFETY_STATUS_PROTECTIVE_STOP = 3u,
    SAFETY_STATUS_REDUCED = 2u,
    SAFETY_STATUS_NORMAL = 1u,
  };


  typedef boost::shared_ptr< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyStatus_

typedef ::ur_rtde_msgs::SafetyStatus_<std::allocator<void> > SafetyStatus;

typedef boost::shared_ptr< ::ur_rtde_msgs::SafetyStatus > SafetyStatusPtr;
typedef boost::shared_ptr< ::ur_rtde_msgs::SafetyStatus const> SafetyStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator1> & lhs, const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_rtde_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3a60ff6f24f07c1fae24613fa44ca20";
  }

  static const char* value(const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3a60ff6f24f07c1ULL;
  static const uint64_t static_value2 = 0xfae24613fa44ca20ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_rtde_msgs/SafetyStatus";
  }

  static const char* value(const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message holds data describing the safety status value\n"
"\n"
"uint8 SAFETY_STATUS_SYSTEM_THREE_POSITION_ENABLING_STOP=13\n"
"uint8 SAFETY_STATUS_AUTOMATIC_MODE_SAFEGUARD_STOP=12\n"
"uint8 SAFETY_STATUS_UNDEFINED_SAFETY_MODE=11\n"
"uint8 SAFETY_STATUS_VALIDATE_JOINT_ID=10\n"
"uint8 SAFETY_STATUS_FAULT=9\n"
"uint8 SAFETY_STATUS_VIOLATION=8\n"
"uint8 SAFETY_STATUS_ROBOT_EMERGENCY_STOP=7\n"
"uint8 SAFETY_STATUS_SYSTEM_EMERGENCY_STOP=6\n"
"uint8 SAFETY_STATUS_SAFEGUARD_STOP=5\n"
"uint8 SAFETY_STATUS_RECOVERY=4\n"
"uint8 SAFETY_STATUS_PROTECTIVE_STOP=3\n"
"uint8 SAFETY_STATUS_REDUCED=2\n"
"uint8 SAFETY_STATUS_NORMAL=1\n"
"\n"
"uint8 status\n"
;
  }

  static const char* value(const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_rtde_msgs::SafetyStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_RTDE_MSGS_MESSAGE_SAFETYSTATUS_H
